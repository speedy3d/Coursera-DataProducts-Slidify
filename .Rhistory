y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(x ~ y)
dfbetas(fit)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
dfbetas(fit)
data(mtcars)
fit_1 <- lm(mpg ~ factor(cyl) + wt, mtcars)
fit_2 <- lm(mpg ~ factor(cyl) + wt+(wt*cyl), mtcars)
anova(fit_1, fit_2)
library(MASS)
shuttle1<-shuttle
levels(shuttle1$use)[1]<-"1"
levels(shuttle1$use)[2]<-"0"
shuttle1$use<-as.numeric(as.character(shuttle1$use))
glm(formula = use ~ factor(wind), family = binomial(logit), data = shuttle1)
1/exp(0.03181)
summary(logRegshuttle <- glm(use ~ wind,family="binomial", data=shuttle1))
glm(formula = use ~ factor(wind)+magn, family = binomial(logit), data = shuttle1)
1/exp(0.03201)
LogiRegUseMinus<-glm((1-shuttle$use)~shuttle$wind,family="binomial")
glm(formula = 1-use ~ factor(wind), family = binomial(logit), data = shuttle1)
1-0.03181
exp(coef(glm(count ~ as.factor(spray) - 1, family="poisson", InsectSprays)))
14.5/15.333
data(InsectSprays)
InsectSprays
pspray <- glm(InsectSprays$count ~ factor(InsectSprays$spray),family="Poisson")
pspray <- glm(InsectSprays$count ~ factor(InsectSprays$spray),family="poisson")
summary(pspray)
exp(2.659)
14.5/15.333
exp(coef(glm(count ~ as.factor(spray) - 1, family="poisson", InsectSprays)))
y=c(1:10)
x=y-1+rnorm(10)/10
z=c(1:10)
z=z*2
summary(lm(y~x+offset(z)))
z=z*4
summary(lm(y~x+offset(z)))
z=z+5
summary(lm(y~x+offset(z)))
z=z+100
summary(lm(y~x+offset(z)))
z=z/10
summary(lm(y~x+offset(z)))
z=z+log(10)
summary(lm(y~x+offset(z)))
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(y ~ x)
d1 <- c(0, 0 ,0, 0, 0,  0,  1 , 1,  1 , 1 , 1)
d2 <- c(1, 1 ,1, 1, 1,  1,  0 , 0,  0, 0 , 0)
summary(lm(y ~ d1*x))
shiny::runApp('OneDrive/Documents/Education/Coursera/Developing Data Products/quiz1-shiny')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shinyapps::setAccountInfo(name='speedy3d', token='809927E8A069536FDFA1B1D78E03F30F', secret='qwESclviS+PvT4o26YdKj3CA5KyAmb217yViYfel')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='speedy3d', token='809927E8A069536FDFA1B1D78E03F30F', secret='qwESclviS+PvT4o26YdKj3CA5KyAmb217yViYfel')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
require(rCharts)
data(airquality)
head(airquality)
dTable(airquality, sPaginationType = "full_numbers")
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
library(ggplot)
library(ggplot2)
geom_area()
library(ggplot2)
df= data.frame(Time=as.numeric(strsplit('1939 1949 1959 1969 1979 1989 1999 2009 2019 2029 2039 2049 1939 1949 1959 1969 1979 1989 1999 2009 2019 2029 2039 2049', split=' ')[[1]] ),
Acres=as.numeric(strsplit('139504.2 233529.0 392105.3 502983.9 685159.9 835594.7 882945.1 1212671.4 1475211.9 1717971.7 1862505.7 1934308.0 308261.4 502460.8 834303.1 1115150.7 1430797.8 1712085.8 1973366.1 1694907.7 1480506.0 1280047.6 1164200.5 1118045.3', split=' ')[[1]] ),
WUClass= strsplit('DenseUrban DenseUrban DenseUrban DenseUrban DenseUrban DenseUrban DenseUrban DenseUrban DenseUrban DenseUrban DenseUrban DenseUrban Urban Urban Urban Urban Urban Urban Urban Urban Urban Urban Urban Urban', split=' ')[[1]]
)
a=ggplot(df,aes(x = Time,y = Acres,fill=WUClass))+ geom_area( position = 'stack'  )
plot(a)
a+ geom_line(aes(position = 'stack')
bmi_data = data.frame(Weight = as.numeric(40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 160, 160)
Height = as.numeric(1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0)
a=ggplot(df, aes(x=WEight, y=Height))
plot(a)
bmi_data = data.frame(Weight = as.numeric(40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 160, 160)
Height = as.numeric(1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0)
a=ggplot(df, aes(x=WEight, y=Height))
+ goem_area(position='stack')
plot(a)
bmi_data = data.frame(Weight = as.numeric(40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 160, 160)
Height = as.numeric(1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0)
a=ggplot(df, aes(x=WEight, y=Height))
+ goem_area(position='stack')
plot(a)
a+goem_line(aes(position = 'stack'))
bmi_data = data.frame(Weight = as.numeric(40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 160, 160)
Height = as.numeric(1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0)
a=ggplot(bmi_data, aes(x=WEight, y=Height))
+ goem_area(position='stack')
plot(a)
a+goem_line(aes(position = 'stack'))
#BMI Area chart
library(ggplot2)
#in Kg/m^2
bmi_data = data.frame(Weight = as.numeric(40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 160, 160)
Height = as.numeric(1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0)
a=ggplot(bmi_data, aes(x=WEight, y=Height))
+ goem_area(position='stack')
plot(a)
a+goem_line(aes(position = 'stack'))
#in Kg/m^2
bmi_data = data.frame(Weight = as.numeric(40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 160, 160)
Height = as.numeric(1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0)
a=ggplot(bmi_data, aes(x=WEight, y=Height))
plot(a)
hist(bmi_data)
geom_area()
hist(bmi_data)
bmi_data = data.frame(Weight = as.numeric(40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 160, 160)
Height = as.numeric(1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0)
)
a=ggplot(bmi_data, aes(x=WEight, y=Height))
plot(a)
hist(bmi_data)
bmi_data <- data.frame(Weight = as.numeric(40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 160, 160)
Height = as.numeric(1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0)
)
bmi_data <- data.frame(Weight = as.numeric(40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 160, 160),
Height = as.numeric(1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0)
)
hist(bmi_data)
a=ggplot(bmi_data, aes(x=WEight, y=Height))
plot(a)
a=ggplot(bmi_data, aes(x=WEight, y=Height)) + geom_point()
plot(a)
a=ggplot(bmi_data, aes(x=Weight, y=Height)) + geom_point()
plot(a)
shiny::runApp('OneDrive/Documents/Education/Coursera/Developing Data Products/sample')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('OneDrive/Documents/Education/Coursera/Developing Data Products/sample')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
install.packages("AppliedPredictiveModeling")
install.packages("caret")
#1
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
train = createDataPartition(diagnosis, p = 0.50,list=FALSE)
test = createDataPartition(diagnosis, p = 0.50,list=FALSE)
summary(train)
nrow(train)
nrow(test)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
nrow(train)
nrow(test)
nmrow(training)
nrow(training)
nrow(testing)
nrow(diagnosis)
nrow(AlzheimerDisease)
nrow(AlzheimerDisease)
AlzheimerDisease
adData
nrow(adData)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
head(training)
head(testing)
head(test)
nrow(testing)
nrow(training)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(SuperPlasticizer)
hist(concrete$SuperPlasticizer)
hist(mixtures$SuperPlasticizer)
head(concrete)
hist(concrete$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
IL_str <- grep("^IL", colnames(trainig), value=TRUE)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
#get predictors that start with IL
IL_str <- grep("^IL", colnames(trainig), value=TRUE)
#get predictors that start with IL
IL_str <- grep("^IL", colnames(training), value=TRUE)
head(IL_str)
IL_str
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.8)
preProc$rotation
preProc <- preProcess(training[, IL_str], method = "center", thresh = 0.8)
preProc$rotation
head(preProc)
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.8)
preProc$rotation
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.9)
preProc$rotation
##4
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
#get predictors that start with IL
IL_str <- grep("^IL", colnames(training), value=TRUE)
## make a subset of these predictors
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
## train the data using the first method
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
install.packages("e1071")
##4
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
#get predictors that start with IL
IL_str <- grep("^IL", colnames(training), value=TRUE)
## make a subset of these predictors
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
## train the data using the first method
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
predictions <- predict(modelFit, newdata = testing)
## get the confustion matrix for the first method
C1 <- confusionMatrix(predictions, testing$diagnosis)
print(C1)
A1 <- C1$overall[1]
## do similar steps with the caret package
modelFit <- train(training$diagnosis ~ ., method = "glm", preProcess = "pca",
data = training, trControl = trainControl(preProcOptions = list(thresh = 0.8)))
C2 <- confusionMatrix(testing$diagnosis, predict(modelFit, testing))
print(C2)
A2 <- C2$overall[1]
##4
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3433)
#get predictors that start with IL
IL_str <- grep("^IL", colnames(training), value=TRUE)
## make a subset of these predictors
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
## train the data using the first method
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
predictions <- predict(modelFit, newdata = testing)
## get the confustion matrix for the first method
C1 <- confusionMatrix(predictions, testing$diagnosis)
print(C1)
A1 <- C1$overall[1]
## do similar steps with the caret package
modelFit <- train(training$diagnosis ~ ., method = "glm", preProcess = "pca",
data = training, trControl = trainControl(preProcOptions = list(thresh = 0.8)))
C2 <- confusionMatrix(testing$diagnosis, predict(modelFit, testing))
print(C2)
A2 <- C2$overall[1]
#second attempt
#Create some data to populate background chart
ht_chart = seq(1.5,2.0, length.out=1000)
wt_chart = seq(40,160, length.out=1000)
#data = expand.grid(x=ht_chart, y=wt_chart)
colnames(file) <- c("height", "weight")
data_chart = file
bmi_calc = function(h,w) { w /(h*h)}
data_chart = data.frame(bmi_calc(ht_chart, wt_chart),ht_chart, wt_chart, 0)
colnames(data_chart) <- c("bmi", "height", "weight", "class")
data_chart$class <- ifelse(data_chart$bmi < 18.50, "Under Weight", ifelse(data_chart$bmi < 25.00 & data_chart$bmi >= 18.50, "Normal", ifelse(data_chart$bmi < 30.00 & data_chart$bmi >= 25.00, "Overweight", ifelse(data_chart$bmi >= 30.00, "Obese", "NULL"))))
data_chart$weight <- as.numeric(data_chart$weight)
data_chart$height <- as.numeric(data_chart$height)
data_chart$class <- as.factor(data_chart$class)
head(data_chart)
#set correct classification to bmi
library(ggplot2)
#in Kg/m^2
a=ggplot(data_chart, aes(x=weight, y=height, fill=class)) + geom_area(position = "stack")
plot(a)
ggplot(data_chart)
contour(ht_chart, wt_chart, data_chart, levels=c("Under Weight", "Normal", "Overweight", "Obese"), drawlabels=TRUE, xlab="Height", ylab="Weight(kgs")
#in Kg/m^2
bmi_data <- data.frame(Weight = as.numeric(40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 160, 160),
Height = as.numeric(1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0)
)
a=ggplot(bmi_data, aes(x=Weight, y=Height)) + geom_point()
plot(a)
bmi_data = data.frame(
df= data.frame(Time=as.numeric(strsplit('1939 1949 1959 1969 1979 1989 1999 2009 2019 2029 2039 2049 1939 1949 1959 1969 1979 1989 1999 2009 2019 2029 2039 2049', split=' ')[[1]] ),
Acres=as.numeric(strsplit('139504.2 233529.0 392105.3 502983.9 685159.9 835594.7 882945.1 1212671.4 1475211.9 1717971.7 1862505.7 1934308.0 308261.4 502460.8 834303.1 1115150.7 1430797.8 1712085.8 1973366.1 1694907.7 1480506.0 1280047.6 1164200.5 1118045.3', split=' ')[[1]] ),
WUClass= strsplit('DenseUrban DenseUrban DenseUrban DenseUrban DenseUrban DenseUrban DenseUrban DenseUrban DenseUrban DenseUrban DenseUrban DenseUrban Urban Urban Urban Urban Urban Urban Urban Urban Urban Urban Urban Urban', split=' ')[[1]]
)
a=ggplot(df,aes(x = Weight,y = Acres,fill=WUClass))+ geom_area( position = 'stack'  )
plot(a)
a+ geom_line(aes(position = 'stack')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('~/OneDrive/Documents/Education/Coursera/Developing Data Products/sample')
shiny::runApp('OneDrive/Documents/Education/Coursera/Developing Data Products/sample')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('OneDrive/Documents/Education/Coursera/Developing Data Products/sample')
shiny::runApp('OneDrive/Documents/Education/Coursera/Developing Data Products/sample2')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('OneDrive/Documents/Education/Coursera/Developing Data Products/sample2')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('OneDrive/Documents/Education/Coursera/Developing Data Products/sample')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
library(slidify)
install_github('slidify', 'ramnathv')
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
shiny::runApp('GitHub/Coursera-DataProducts')
getwd()
setwd("F:\My Documents\OneDrive\Documents\Education\Coursera\Developing Data Products\slidify")
setwd("F:/My Documents/OneDrive/Documents/Education/Coursera/Developing Data Products")
getwd()
author("BMI-Tool-Presentation")
